name: Autonomous Factory CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.12"
  COVERAGE_THRESHOLD: 90
  MUTATION_SCORE_THRESHOLD: 70

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Lint with flake8
      run: |
        flake8 scripts/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 scripts/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type check with mypy
      run: |
        mypy scripts/ --ignore-missing-imports

    - name: Security scan with bandit
      run: |
        bandit -r scripts/ -f json -o bandit-report.json || true

    - name: Test with pytest
      run: |
        pytest --cov=scripts --cov-report=xml --cov-report=html --junitxml=junit.xml

    - name: Persona prefix linter (warning-only)
      run: |
        python scripts/check_persona_prefix.py || echo "[warning] Persona prefix violations detected (non-fatal)"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          junit.xml
          bandit-report.json
          reports/

  factory-build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Run factory plan
      run: |
        python scripts/factory.py plan --project ci-test

    - name: Run factory build (stub)
      run: |
        python scripts/factory.py build --project ci-test

    - name: Upload factory artifacts
      uses: actions/upload-artifact@v3
      with:
        name: factory-artifacts
        path: .factory-out/

  quality-gates:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Download test results
      uses: actions/download-artifact@v3
      with:
        name: test-results-3.12
        path: test-results/

    - name: Check coverage threshold
      run: |
        python -c "
        import xml.etree.ElementTree as ET
        tree = ET.parse('test-results/coverage.xml')
        root = tree.getroot()
        coverage = float(root.get('line-rate', 0)) * 100
        print(f'Coverage: {coverage:.1f}%')
        if coverage < ${{ env.COVERAGE_THRESHOLD }}:
            print(f'ERROR: Coverage {coverage:.1f}% below threshold ${{ env.COVERAGE_THRESHOLD }}%')
            exit(1)
        "

    - name: Check test results
      run: |
        python -c "
        import xml.etree.ElementTree as ET
        tree = ET.parse('test-results/junit.xml')
        root = tree.getroot()
        failures = int(root.get('failures', 0))
        errors = int(root.get('errors', 0))
        if failures > 0 or errors > 0:
            print(f'ERROR: {failures} failures, {errors} errors')
            exit(1)
        print('All tests passed')
        "
